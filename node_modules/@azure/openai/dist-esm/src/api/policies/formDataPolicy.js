// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { FormData, File } from "formdata-node";
import { Readable } from "node:stream";
/**
 * The programmatic identifier of the formDataPolicy.
 */
export const formDataPolicyName = "formDataPolicyWithFileUpload";
/**
 * A policy that encodes FormData on the request into the body.
 */
export function formDataWithFileUploadPolicy(boundary) {
    return {
        name: formDataPolicyName,
        async sendRequest(request, next) {
            if (request.formData) {
                const contentType = request.headers.get("Content-Type");
                if (contentType && contentType.indexOf("application/x-www-form-urlencoded") !== -1) {
                    request.body = wwwFormUrlEncode(request.formData);
                    request.formData = undefined;
                }
                else {
                    await prepareFormData(request.formData, request, boundary);
                }
            }
            return next(request);
        },
    };
}
function wwwFormUrlEncode(formData) {
    const urlSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(formData)) {
        if (Array.isArray(value)) {
            for (const subValue of value) {
                urlSearchParams.append(key, subValue.toString());
            }
        }
        else {
            urlSearchParams.append(key, value.toString());
        }
    }
    return urlSearchParams.toString();
}
async function prepareFormData(formData, request, boundary) {
    const requestForm = new FormData();
    for (const formKey of Object.keys(formData)) {
        const formValue = formData[formKey];
        if (Array.isArray(formValue)) {
            for (const subValue of formValue) {
                requestForm.append(formKey, subValue);
            }
        }
        else {
            requestForm.append(formKey, formValue);
        }
    }
    // This library doesn't define `type` entries in the exports section of its package.json.
    // See https://github.com/microsoft/TypeScript/issues/52363
    const { FormDataEncoder } = await import("form-data-encoder");
    const encoder = boundary
        ? new FormDataEncoder(requestForm, boundary)
        : new FormDataEncoder(requestForm);
    const body = Readable.from(encoder.encode());
    request.body = body;
    request.formData = undefined;
    const contentType = request.headers.get("Content-Type");
    if (contentType && contentType.indexOf("multipart/form-data") !== -1) {
        request.headers.set("Content-Type", encoder.contentType);
    }
    const contentLength = encoder.contentLength;
    if (contentLength !== undefined) {
        request.headers.set("Content-Length", contentLength);
    }
}
export function createFile(data) {
    return new File([data], "placeholder.wav");
}
//# sourceMappingURL=formDataPolicy.js.map