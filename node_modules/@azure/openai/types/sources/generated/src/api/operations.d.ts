import { Embeddings, Completions, ChatMessage, ChatCompletions, BatchImageGenerationOperationResponse } from "../models/models.js";
import { BeginAzureBatchImageGeneration202Response, BeginAzureBatchImageGenerationDefaultResponse, BeginAzureBatchImageGenerationLogicalResponse, GetAzureBatchImageGenerationOperationStatus200Response, GetAzureBatchImageGenerationOperationStatusDefaultResponse, GetAzureBatchImageGenerationOperationStatusLogicalResponse, GetChatCompletions200Response, GetChatCompletionsDefaultResponse, GetChatCompletionsWithAzureExtensions200Response, GetChatCompletionsWithAzureExtensionsDefaultResponse, GetCompletions200Response, GetCompletionsDefaultResponse, GetEmbeddings200Response, GetEmbeddingsDefaultResponse, OpenAIContext as Client } from "../rest/index.js";
import { StreamableMethod } from "@azure-rest/core-client";
import { GetEmbeddingsOptions, GetCompletionsOptions, GetChatCompletionsOptions, GetChatCompletionsWithAzureExtensionsOptions, GetAzureBatchImageGenerationOperationStatusOptions, BeginAzureBatchImageGenerationOptions } from "../models/options.js";
export declare function _getEmbeddingsSend(context: Client, input: string[], deploymentId: string, options?: GetEmbeddingsOptions): StreamableMethod<GetEmbeddings200Response | GetEmbeddingsDefaultResponse>;
export declare function _getEmbeddingsDeserialize(result: GetEmbeddings200Response | GetEmbeddingsDefaultResponse): Promise<Embeddings>;
/** Return the embeddings for a given prompt. */
export declare function getEmbeddings(context: Client, input: string[], deploymentId: string, options?: GetEmbeddingsOptions): Promise<Embeddings>;
export declare function _getCompletionsSend(context: Client, prompt: string[], deploymentId: string, options?: GetCompletionsOptions): StreamableMethod<GetCompletions200Response | GetCompletionsDefaultResponse>;
export declare function _getCompletionsDeserialize(result: GetCompletions200Response | GetCompletionsDefaultResponse): Promise<Completions>;
/**
 * Gets completions for the provided input prompts.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export declare function getCompletions(context: Client, prompt: string[], deploymentId: string, options?: GetCompletionsOptions): Promise<Completions>;
export declare function _getChatCompletionsSend(context: Client, messages: ChatMessage[], deploymentId: string, options?: GetChatCompletionsOptions): StreamableMethod<GetChatCompletions200Response | GetChatCompletionsDefaultResponse>;
export declare function _getChatCompletionsDeserialize(result: GetChatCompletions200Response | GetChatCompletionsDefaultResponse): Promise<ChatCompletions>;
/**
 * Gets chat completions for the provided chat messages.
 * Completions support a wide variety of tasks and generate text that continues from or "completes"
 * provided prompt data.
 */
export declare function getChatCompletions(context: Client, messages: ChatMessage[], deploymentId: string, options?: GetChatCompletionsOptions): Promise<ChatCompletions>;
export declare function _getChatCompletionsWithAzureExtensionsSend(context: Client, messages: ChatMessage[], deploymentId: string, options?: GetChatCompletionsWithAzureExtensionsOptions): StreamableMethod<GetChatCompletionsWithAzureExtensions200Response | GetChatCompletionsWithAzureExtensionsDefaultResponse>;
export declare function _getChatCompletionsWithAzureExtensionsDeserialize(result: GetChatCompletionsWithAzureExtensions200Response | GetChatCompletionsWithAzureExtensionsDefaultResponse): Promise<ChatCompletions>;
/**
 * Gets chat completions for the provided chat messages.
 * This is an Azure-specific version of chat completions that supports integration with configured data sources and
 * other augmentations to the base chat completions capabilities.
 */
export declare function getChatCompletionsWithAzureExtensions(context: Client, messages: ChatMessage[], deploymentId: string, options?: GetChatCompletionsWithAzureExtensionsOptions): Promise<ChatCompletions>;
export declare function _getAzureBatchImageGenerationOperationStatusSend(context: Client, operationId: string, options?: GetAzureBatchImageGenerationOperationStatusOptions): StreamableMethod<GetAzureBatchImageGenerationOperationStatus200Response | GetAzureBatchImageGenerationOperationStatusDefaultResponse | GetAzureBatchImageGenerationOperationStatusLogicalResponse>;
export declare function _getAzureBatchImageGenerationOperationStatusDeserialize(result: GetAzureBatchImageGenerationOperationStatus200Response | GetAzureBatchImageGenerationOperationStatusDefaultResponse | GetAzureBatchImageGenerationOperationStatusLogicalResponse): Promise<BatchImageGenerationOperationResponse>;
/** Returns the status of the images operation */
export declare function getAzureBatchImageGenerationOperationStatus(context: Client, operationId: string, options?: GetAzureBatchImageGenerationOperationStatusOptions): Promise<BatchImageGenerationOperationResponse>;
export declare function _beginAzureBatchImageGenerationSend(context: Client, prompt: string, options?: BeginAzureBatchImageGenerationOptions): StreamableMethod<BeginAzureBatchImageGeneration202Response | BeginAzureBatchImageGenerationDefaultResponse | BeginAzureBatchImageGenerationLogicalResponse>;
export declare function _beginAzureBatchImageGenerationDeserialize(result: BeginAzureBatchImageGeneration202Response | BeginAzureBatchImageGenerationDefaultResponse | BeginAzureBatchImageGenerationLogicalResponse): Promise<BatchImageGenerationOperationResponse>;
/** Starts the generation of a batch of images from a text caption */
export declare function beginAzureBatchImageGeneration(context: Client, prompt: string, options?: BeginAzureBatchImageGenerationOptions): Promise<BatchImageGenerationOperationResponse>;
//# sourceMappingURL=operations.d.ts.map