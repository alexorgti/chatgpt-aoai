import { TokenCredential, KeyCredential } from "@azure/core-auth";
import { Embeddings, Completions, ChatMessage, ChatCompletions, BatchImageGenerationOperationResponse } from "./models/models.js";
import { GetEmbeddingsOptions, GetCompletionsOptions, GetChatCompletionsOptions, GetChatCompletionsWithAzureExtensionsOptions, GetAzureBatchImageGenerationOperationStatusOptions, BeginAzureBatchImageGenerationOptions } from "./models/options.js";
import { OpenAIClientOptions } from "./api/index.js";
export { OpenAIClientOptions } from "./api/OpenAIContext.js";
export declare class OpenAIClient {
    private _client;
    /** Azure OpenAI APIs for completions and search */
    constructor(endpoint: string, credential: KeyCredential | TokenCredential, options?: OpenAIClientOptions);
    /** Return the embeddings for a given prompt. */
    getEmbeddings(input: string[], deploymentId: string, options?: GetEmbeddingsOptions): Promise<Embeddings>;
    /**
     * Gets completions for the provided input prompts.
     * Completions support a wide variety of tasks and generate text that continues from or "completes"
     * provided prompt data.
     */
    getCompletions(prompt: string[], deploymentId: string, options?: GetCompletionsOptions): Promise<Completions>;
    /**
     * Gets chat completions for the provided chat messages.
     * Completions support a wide variety of tasks and generate text that continues from or "completes"
     * provided prompt data.
     */
    getChatCompletions(messages: ChatMessage[], deploymentId: string, options?: GetChatCompletionsOptions): Promise<ChatCompletions>;
    /**
     * Gets chat completions for the provided chat messages.
     * This is an Azure-specific version of chat completions that supports integration with configured data sources and
     * other augmentations to the base chat completions capabilities.
     */
    getChatCompletionsWithAzureExtensions(messages: ChatMessage[], deploymentId: string, options?: GetChatCompletionsWithAzureExtensionsOptions): Promise<ChatCompletions>;
    /** Returns the status of the images operation */
    getAzureBatchImageGenerationOperationStatus(operationId: string, options?: GetAzureBatchImageGenerationOperationStatusOptions): Promise<BatchImageGenerationOperationResponse>;
    /** Starts the generation of a batch of images from a text caption */
    beginAzureBatchImageGeneration(prompt: string, options?: BeginAzureBatchImageGenerationOptions): Promise<BatchImageGenerationOperationResponse>;
}
//# sourceMappingURL=OpenAIClient.d.ts.map